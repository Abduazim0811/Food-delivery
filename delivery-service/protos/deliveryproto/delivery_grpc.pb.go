// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.1
// source: protos/deliveryproto/delivery.proto

package deliveryproto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	DeliveryService_CreateDelivery_FullMethodName       = "/DeliveryService/CreateDelivery"
	DeliveryService_GetDeliveryStatus_FullMethodName    = "/DeliveryService/GetDeliveryStatus"
	DeliveryService_UpdateDeliveryStatus_FullMethodName = "/DeliveryService/UpdateDeliveryStatus"
)

// DeliveryServiceClient is the client API for DeliveryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DeliveryServiceClient interface {
	CreateDelivery(ctx context.Context, in *CreateDeliveryReq, opts ...grpc.CallOption) (*CreateDeliveryRes, error)
	GetDeliveryStatus(ctx context.Context, in *GetDeliveryStatusReq, opts ...grpc.CallOption) (*Delivery, error)
	UpdateDeliveryStatus(ctx context.Context, in *UpdateDeliveryStatusReq, opts ...grpc.CallOption) (*UpdateDeliveryStatusRes, error)
}

type deliveryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDeliveryServiceClient(cc grpc.ClientConnInterface) DeliveryServiceClient {
	return &deliveryServiceClient{cc}
}

func (c *deliveryServiceClient) CreateDelivery(ctx context.Context, in *CreateDeliveryReq, opts ...grpc.CallOption) (*CreateDeliveryRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateDeliveryRes)
	err := c.cc.Invoke(ctx, DeliveryService_CreateDelivery_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deliveryServiceClient) GetDeliveryStatus(ctx context.Context, in *GetDeliveryStatusReq, opts ...grpc.CallOption) (*Delivery, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Delivery)
	err := c.cc.Invoke(ctx, DeliveryService_GetDeliveryStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deliveryServiceClient) UpdateDeliveryStatus(ctx context.Context, in *UpdateDeliveryStatusReq, opts ...grpc.CallOption) (*UpdateDeliveryStatusRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateDeliveryStatusRes)
	err := c.cc.Invoke(ctx, DeliveryService_UpdateDeliveryStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeliveryServiceServer is the server API for DeliveryService service.
// All implementations must embed UnimplementedDeliveryServiceServer
// for forward compatibility
type DeliveryServiceServer interface {
	CreateDelivery(context.Context, *CreateDeliveryReq) (*CreateDeliveryRes, error)
	GetDeliveryStatus(context.Context, *GetDeliveryStatusReq) (*Delivery, error)
	UpdateDeliveryStatus(context.Context, *UpdateDeliveryStatusReq) (*UpdateDeliveryStatusRes, error)
	mustEmbedUnimplementedDeliveryServiceServer()
}

// UnimplementedDeliveryServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDeliveryServiceServer struct {
}

func (UnimplementedDeliveryServiceServer) CreateDelivery(context.Context, *CreateDeliveryReq) (*CreateDeliveryRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDelivery not implemented")
}
func (UnimplementedDeliveryServiceServer) GetDeliveryStatus(context.Context, *GetDeliveryStatusReq) (*Delivery, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeliveryStatus not implemented")
}
func (UnimplementedDeliveryServiceServer) UpdateDeliveryStatus(context.Context, *UpdateDeliveryStatusReq) (*UpdateDeliveryStatusRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDeliveryStatus not implemented")
}
func (UnimplementedDeliveryServiceServer) mustEmbedUnimplementedDeliveryServiceServer() {}

// UnsafeDeliveryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DeliveryServiceServer will
// result in compilation errors.
type UnsafeDeliveryServiceServer interface {
	mustEmbedUnimplementedDeliveryServiceServer()
}

func RegisterDeliveryServiceServer(s grpc.ServiceRegistrar, srv DeliveryServiceServer) {
	s.RegisterService(&DeliveryService_ServiceDesc, srv)
}

func _DeliveryService_CreateDelivery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDeliveryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliveryServiceServer).CreateDelivery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeliveryService_CreateDelivery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliveryServiceServer).CreateDelivery(ctx, req.(*CreateDeliveryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeliveryService_GetDeliveryStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeliveryStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliveryServiceServer).GetDeliveryStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeliveryService_GetDeliveryStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliveryServiceServer).GetDeliveryStatus(ctx, req.(*GetDeliveryStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeliveryService_UpdateDeliveryStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDeliveryStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliveryServiceServer).UpdateDeliveryStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeliveryService_UpdateDeliveryStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliveryServiceServer).UpdateDeliveryStatus(ctx, req.(*UpdateDeliveryStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

// DeliveryService_ServiceDesc is the grpc.ServiceDesc for DeliveryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DeliveryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "DeliveryService",
	HandlerType: (*DeliveryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDelivery",
			Handler:    _DeliveryService_CreateDelivery_Handler,
		},
		{
			MethodName: "GetDeliveryStatus",
			Handler:    _DeliveryService_GetDeliveryStatus_Handler,
		},
		{
			MethodName: "UpdateDeliveryStatus",
			Handler:    _DeliveryService_UpdateDeliveryStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/deliveryproto/delivery.proto",
}
